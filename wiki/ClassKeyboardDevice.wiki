#summary Documentation of the KeyboardDevice class

The KeyboardDevice class is an abstract base class for keyboard reading and is used to interact with the TIY software. Child classes inheriting from it are [http://code.google.com/p/tiy/wiki/ClassLinuxKeyboard LinuxKeyboard] and [http://code.google.com/p/tiy/wiki/WindowsKeyboard WindowsKeyboard].

= Usage = 

See child classes [http://code.google.com/p/tiy/wiki/ClassLinuxKeyboard LinuxKeyboard] and [http://code.google.com/p/tiy/wiki/WindowsKeyboard WindowsKeyboard], as not directly used.

= Variables =

{{{
boost::mutex keyboard_mutex;

bool do_debugging;
bool is_open;

// Keystroke event variables
bool was_SPACE_pressed, was_ESC_pressed;
}}}

= Methods =

{{{
protected:
	// Start reading the keyboard in a loop (called by openAndReadKeyboard() in a new thread)
	virtual void startRead(int& read_intervall_ms) = 0;

	// Update (set) the event variables
	void updateStatus(bool& was_SPACE_pressed_, bool& was_ESC_pressed_);
}}}

{{{
	KeyboardDevice(bool& do_debugging_);

	virtual ~KeyboardDevice() {};

	// Connect to the keyboard and start reading it (starts "startRead()" in a new thread)
	virtual bool openAndReadKeyboard(std::string& event_file_name, int& read_intervall_ms) = 0;

	// Get the values of the event variables (without resetting!)
	void getStatusSinceLastReset(bool& was_SPACE_pressed_, bool& was_ESC_pressed_);

	// Reset the values of the event variables (should usually be called directly after getStatusSinceLastReset())
	void resetStatus();
}}}