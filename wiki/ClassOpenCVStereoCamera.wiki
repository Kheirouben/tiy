#summary Documentation of the OpenCVStereoCamera class

The !OpenCVStereoCamera class is a child class of [http://code.google.com/p/tiy/wiki/ClassStereoCamera StereoCamera] for handling two opencv supported cameras to use as a stereo camera. 

= Usage = 

This child class implements the interface to two OpenCV compatible cameras (or video files) and grabbing synchronized stereo frames.

== Example ==

See [http://code.google.com/p/tiy/wiki/IncludeLibrary IncludeLibrary] on how to include the TIY library in your own code (e.g. this example).

{{{
#include <tiy.h>

int main(int argc, char* argv[])
{
  bool do_debugging = false;

  std::string input_src = "o"; // o: real OpenCV cameras, v: video files
  // "o"
  std::string camera_id_left = "1";
  std::string camera_id_right = "2";
  // "v"
  std::string video_left = "video_left.avi";
  std::string video_right = "video_right.avi";

  int frame_width = 1280;
  int frame_height = 964;
  int camera_exposure = 10000;
  int camera_gain = 300;
  int frame_rate = 20;

  bool do_log_video = true;
  std::string log_video_left = "log_left.avi";
  std::string log_video_right = "log_right.avi";
  

  // 1. Create an OpenCVStereoCamera object (here from a StereoCamera object)
  boost::scoped_ptr<tiy::StereoCamera> stereo_camera;

  if (input_src == "o")
  {
        stereo_camera.reset(new tiy::OpenCVStereoCamera(do_debugging, camera_id_left, camera_id_right,
                                                         frame_width, frame_height, camera_exposure, 
                                                          camera_gain, frame_rate));
  }
  else if (input_src == "v")
  {
  	stereo_camera.reset(new tiy::OpenCVStereoCamera(do_debugging, camera_id_left, camera_id_right,
                                                         frame_width, frame_height, camera_exposure,
                                                          camera_gain, frame_rate, video_left, video_right));
  }
  else
        return 0;

  // 2. Open the stereo camera (and start the acquisition)
  if (stereo_camera->openCam())
	  stereo_camera->startCam();
  else
  {
	std::cerr << "openCam() failed" << std::endl;
	std::cin.get();
	return 0;
  }

  // 3. Initialize video recording (if selected)
  if (do_log_video)
	stereo_camera->startRecording(log_video_left, log_video_right);


  cv::Mat image_left = stereo_camera->createImage();
  cv::Mat image_right = stereo_camera->createImage();
  long long int frame_timestamp; 

  while(true)
  {
	// 4. Grabs the newest synchronized stereo frame (if the grab rate is higher than the frame rate, the frame can be the previous one) 
	if(!stereo_camera->grabFrame(image_left, image_right, frame_timestamp))
        {
		  if (input_src == "v")
		          std::cout << "Video file finished." << std::endl;
                  else
    	                  std::cerr << "grabFrame() failed" << std::endl;

    	          std::cin.get();
	          return 0;
        }

        // 5. Record the grabbed frame to the video files (if selected)
	if (do_log_video)
		  stereo_camera->recordFrame();

        // Show the stereo frames
        imshow("Image Left", image_left_cpy);
        imshow("Image Right", image_right_cpy);
        // alternative: stereo_camera->showFrame();
        cv::waitKey(10);
  }

  stereo_camera->closeCam();

  return 0;
}

}}}

= Declaration =

{{{
protected:
	bool do_debugging, do_grab_from_video_file;

	bool is_recording, is_open, is_capturing;

	std::string camera_id[2];
	int frame_width, frame_height, x_shift, y_shift, camera_exposure, camera_gain, camera_framerate;

	cv::Mat stereo_frame[2];
	int mat_type;

	std::string video_src_file[2];

	cv::VideoWriter video_recorder[2];
	cv::Mat video_frame[2];

	boost::posix_time::ptime start_time_timestamp;

public:
	StereoCamera(bool& do_debugging_, std::string& camera_id_left,
                      std::string& camera_id_right, int& frame_width_,
                       int& frame_height_, int& camera_exposure_, 
                        int& camera_gain_, int& camera_framerate_);

	StereoCamera(bool& do_debugging_, std::string& camera_id_left,
                      std::string& camera_id_right, int& frame_width_,
                       int& frame_height_, int& camera_exposure_,
                        int& camera_gain_, int& camera_framerate_,
                         std::string& video_file_left, std::string& video_file_right);

	virtual ~StereoCamera() {};

	bool startRecording(std::string& video_dst_file_left, std::string& video_dst_file_right);
	void stopRecording();
	bool recordFrame();

	virtual bool openCam() = 0;
	virtual void closeCam() = 0;

	virtual void startCam() {};
	virtual void stopCam() {};

	virtual bool grabFrame(cv::Mat &image_left, cv::Mat &image_right, long long int& timestamp_us_, double timeout_seconds=1.0f) = 0;

	void showFrame();

	cv::Mat createImage();
}}}

= Methods =
----
*!StereoCamera()*
{{{
	StereoCamera(bool& do_debugging_, std::string& camera_id_left,
                      std::string& camera_id_right, int& frame_width_,
                       int& frame_height_, int& camera_exposure_, 
                        int& camera_gain_, int& camera_framerate_);
}}}
Constructor to initialize parameters for two real cameras as stereo input source
{{{
	StereoCamera(bool& do_debugging_, std::string& camera_id_left,
                      std::string& camera_id_right, int& frame_width_,
                       int& frame_height_, int& camera_exposure_,
                        int& camera_gain_, int& camera_framerate_,
                         std::string& video_file_left, std::string& video_file_right);
}}}
Constructor to initialize parameters for two video files as stereo input source (e.g. recorded by this class).

  _do`_`debugging`_`_: set to true to get debug output

  _camera`_`id`_`left/right_: id of the left/right camera (e.g. "0" and "1" (OpenCV) or "Basler-21050001" and "Basler-21047766" (Basler))

  _frame`_`width/height_: horizontal/vertical pixel resolution of the cameras

  _camera`_`exposure/gain/framerate_: exposure/gain/framerate of the cameras

  _video`_`file`_`left/right_: name of the left/right video file used as input (e.g.  "video_left.avi"/"video_right.avi")
----
*updateStatus()*
{{{
	void updateStatus(bool& was_left_button_pressed_, bool& was_left_button_released_, bool& is_left_button_pressed_,
			   bool& was_right_button_pressed_,bool& was_right_button_released_,bool& is_right_button_pressed_,
			    bool& has_mouse_wheel_changed_, int& mouse_wheel_position_);
}}}
Set the values of the mouse event variables (called by the update loop in *startRead()* and by *resetStatus()*).
----
*`~`!StereoCamera()*
{{{
	virtual ~StereoCamera() {};
}}}
----
*startRecording()*
{{{
	bool startRecording(std::string& video_dst_file_left, std::string& video_dst_file_right);
}}}
Initializes and opens a stereo video recorder. To actually record a stereo frame to the files, call *recordFrame()* for each frame.

  _video`_`dst`_`file`_`left/right_: hardware id (win) or event file (unix) of the device
----
*stopRecording()*
{{{
	void stopRecording();
}}}
Stops the recording.
----
*recordFrame()*
{{{
	bool recordFrame();
}}}
Records (adds) the newest stereo frame to the video files _video`_`dst`_`file`_`left/right_. Need to be called for EVERY single stereo frame. Should usually be called every time after a new frame is grabbed by *grabFrame()*.
----
*openCam()*
{{{
	virtual void openCam();
}}}
Opens/connects and configures the cameras (/video playback).
----
*closeCam()*
{{{
	virtual void closeCam();
}}}
Closes/disconnects the cameras (/video playback).
----
*startCam()*
{{{
	virtual void startCam();
}}}
Starts the camera acquisition (NOT used).
----
*stopCam()*
{{{
	virtual void stopCam();
}}}
Stops the camera acquisition (NOT used).
----
*grabFrame()*
{{{
	virtual bool grabFrame(cv::Mat &image_left, cv::Mat &image_right, long long int& timestamp_us_, double timeout_seconds=1.0f) = 0;

}}}
Grabs the newest synchronized stereo frame from the two cameras/video files (if the grab rate is higher than the frame rate, the frame can be the previous one) and sets the timestamp.

  _image`_`left/right_: contains the left/right stereo frame grabbed from the left/right camera/video file

  _timestamp`_`us`_`_: frame timestamp in microseconds (time elapsed since the constructor was called)

  _timeout`_`seconds_: available time in seconds (roughly) for trying to get a synchronized stereo frame before returning
----
*showFrame()*
{{{
	void showFrame();
}}}
Display the actual stereo frame (one window per frame). As it is based on cv::imshow, calling cv::waitKey() is needed afterwards.
----
*createImage()*
{{{
	cv::Mat createImage();
}}}
Create and return a cv::Mat image with the size (_frame`_`height_, _frame`_`width_) and type (_mat`_`type_ = _CV`_`8UC1_) of the camera/video frames
----